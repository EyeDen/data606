for(i in 2:21)
{
df2$x <- subset(df1, Hotel.name == v[i], select = c("Freq"))
# Renaming doesn't work, but is necessary for other columns to be added
colnames(df2)[i+1] <- hotels_vector[i]
}
return(df2)
}
final_vegas[1] <- NULL
hotel_ratings <- subset(vegas, select = c("Score", "Hotel.name"))
hotel_ratings <- as.data.frame(table(hotel_ratings))
scores <- subset(hotel_ratings, Hotel.name == hotels_vector[1], select = c("Score",                   "Freq"))
scores <- get_ratings(hotel_ratings, scores, hotels_vector)
# Now we need to transpose this subset of scores and join with the rest
t_ratings <- function(df1, df2, v)
{
# df1 is scores
# df2 is final
for(i in 3:22)
{
temp <- as.data.frame(t(df1[,i]))
z <- i - 1
temp$x <- v[z]
colnames(temp) <- c("r1", "r2", "r3", "r4", "r5", "Hotel.name")
df2 <- rbind(df2, temp)
}
rownames(df2) <- NULL
return(df2)
}
final <- as.data.frame(t(scores[,2]))
final$x <- hotels_vector[1]
colnames(final) <- c("r1", "r2", "r3", "r4", "r5", "Hotel.name")
final <- t_ratings(scores, final, hotels_vector)
# And now we can finally merge the two dataframes into our final data
unique_hotels <- merge(final_vegas, final, by = "Hotel.name")
unique_hotels
# But we also need a subset with all the scores in tact.
hotel_scores <- vegas[, c(5, 8:16)]
hotel_scores <- YNconverter(hotel_scores)
library(ggplot2)
# Boxplot
ggplot(hotel_scores, aes(y = Score, x = Hotel.name)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + labs(title = "Boxplot of Hotel Scores", x = "Hotels", y = "Scores")
# As we see in the boxplot, several hotels have medians at the maximum score of 5
# Very impressive!  Now let's see how the scores breakdown for each individual hotel.
ggplot(df, aes(Hotel.name, value, col = variable)) + geom_point() + stat_smooth() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + labs(title="Number of scores for each hotel", x = "Hotels", y = "Number of scores")
directory <- getwd()
url <- "https://raw.githubusercontent.com/EyeDen/las-vegas/master/LasVegasTripAdvisorReviews-Dataset.csv"
download.file(url = url, destfile = paste(directory,      "LasVegasTripAdvisorReviews-Dataset.csv", sep = "/"))
vegas <- read.csv("LasVegasTripAdvisorReviews-Dataset.csv", sep = ';')
head(vegas, 10)
summary(vegas)
# Calculate mean and median ratings for each hotel
aggregate(Score~Hotel.name, vegas, mean)
aggregate(Score~Hotel.name, vegas, median)
# Get all unique hotels and turn it into a vector
library(dplyr)
hotels <- vegas %>% distinct(vegas$Hotel.name)
hotels_vector <- hotels$`vegas$Hotel.name`
hotels_vector <- as.vector(hotels_vector)
hotels_vector
# We see that there are 22 hotels in this data set.
# The issue, however, is that all values are identical for each hotel entry.
# i.e. For all entries of Circus Circus, the number of rooms doesn't change.
# That means we should condense this down to entry, ideally.
sub_vegas <- vegas[, c(5, 8:16)]
temp <- subset(sub_vegas, Hotel.name == hotels_vector[1])
final_vegas <- temp[1,]
# Now we just have to repeat this 21 more times.
# Fortunately, we should be able to do this with a function.
make_df <- function(df, v)
{
sub_vegas <- df[, c(5, 8:16)]
temp <- subset(sub_vegas, Hotel.name == v[1])
final_vegas <- temp[1,]
for(i in 2:21)
{
temp <- subset(sub_vegas, Hotel.name == v[i])
final_vegas <- rbind(final_vegas, temp[1,])
}
return(final_vegas)
}
final_vegas <- make_df(vegas, hotels_vector)
# Now let's change all the "YES" and "NO" values to 1 and 0
# Again, this will probably be easier as a function.
YNconverter <- function(df)
{
for(i in 2:7)
{
df[,i] <- factor(as.numeric(df[,i]))
levels(df[,i])[1] <- "0"
levels(df[,i])[2] <- "1"
}
return(df)
}
final_vegas <- YNconverter(final_vegas)
# Now we need the number of scores for each hotel.
# And we can delete the Score column.
get_ratings <- function(df1, df2, v)
{
for(i in 2:21)
{
df2$x <- subset(df1, Hotel.name == v[i], select = c("Freq"))
# Renaming doesn't work, but is necessary for other columns to be added
colnames(df2)[i+1] <- hotels_vector[i]
}
return(df2)
}
final_vegas[1] <- NULL
hotel_ratings <- subset(vegas, select = c("Score", "Hotel.name"))
hotel_ratings <- as.data.frame(table(hotel_ratings))
scores <- subset(hotel_ratings, Hotel.name == hotels_vector[1], select = c("Score",                   "Freq"))
scores <- get_ratings(hotel_ratings, scores, hotels_vector)
# Now we need to transpose this subset of scores and join with the rest
t_ratings <- function(df1, df2, v)
{
# df1 is scores
# df2 is final
for(i in 3:22)
{
temp <- as.data.frame(t(df1[,i]))
z <- i - 1
temp$x <- v[z]
colnames(temp) <- c("r1", "r2", "r3", "r4", "r5", "Hotel.name")
df2 <- rbind(df2, temp)
}
rownames(df2) <- NULL
return(df2)
}
final <- as.data.frame(t(scores[,2]))
final$x <- hotels_vector[1]
colnames(final) <- c("r1", "r2", "r3", "r4", "r5", "Hotel.name")
final <- t_ratings(scores, final, hotels_vector)
# And now we can finally merge the two dataframes into our final data
unique_hotels <- merge(final_vegas, final, by = "Hotel.name")
unique_hotels
# But we also need a subset with all the scores in tact.
hotel_scores <- vegas[, c(5, 8:16)]
hotel_scores <- YNconverter(hotel_scores)
library(ggplot2)
# Boxplot
ggplot(hotel_scores, aes(y = Score, x = Hotel.name)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + labs(title = "Boxplot of Hotel Scores", x = "Hotels", y = "Scores")
# As we see in the boxplot, several hotels have medians at the maximum score of 5
# Very impressive!  Now let's see how the scores breakdown for each individual hotel.
ggplot(unique_hotels, aes(Hotel.name, value, col = variable)) + geom_point() + stat_smooth() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + labs(title="Number of scores for each hotel", x = "Hotels", y = "Number of scores")
directory <- getwd()
url <- "https://raw.githubusercontent.com/EyeDen/las-vegas/master/LasVegasTripAdvisorReviews-Dataset.csv"
download.file(url = url, destfile = paste(directory,      "LasVegasTripAdvisorReviews-Dataset.csv", sep = "/"))
vegas <- read.csv("LasVegasTripAdvisorReviews-Dataset.csv", sep = ';')
head(vegas, 10)
summary(vegas)
# Calculate mean and median ratings for each hotel
aggregate(Score~Hotel.name, vegas, mean)
aggregate(Score~Hotel.name, vegas, median)
# Get all unique hotels and turn it into a vector
library(dplyr)
hotels <- vegas %>% distinct(vegas$Hotel.name)
hotels_vector <- hotels$`vegas$Hotel.name`
hotels_vector <- as.vector(hotels_vector)
hotels_vector
# We see that there are 22 hotels in this data set.
# The issue, however, is that all values are identical for each hotel entry.
# i.e. For all entries of Circus Circus, the number of rooms doesn't change.
# That means we should condense this down to entry, ideally.
sub_vegas <- vegas[, c(5, 8:16)]
temp <- subset(sub_vegas, Hotel.name == hotels_vector[1])
final_vegas <- temp[1,]
# Now we just have to repeat this 21 more times.
# Fortunately, we should be able to do this with a function.
make_df <- function(df, v)
{
sub_vegas <- df[, c(5, 8:16)]
temp <- subset(sub_vegas, Hotel.name == v[1])
final_vegas <- temp[1,]
for(i in 2:21)
{
temp <- subset(sub_vegas, Hotel.name == v[i])
final_vegas <- rbind(final_vegas, temp[1,])
}
return(final_vegas)
}
final_vegas <- make_df(vegas, hotels_vector)
# Now let's change all the "YES" and "NO" values to 1 and 0
# Again, this will probably be easier as a function.
YNconverter <- function(df)
{
for(i in 2:7)
{
df[,i] <- factor(as.numeric(df[,i]))
levels(df[,i])[1] <- "0"
levels(df[,i])[2] <- "1"
}
return(df)
}
final_vegas <- YNconverter(final_vegas)
# Now we need the number of scores for each hotel.
# And we can delete the Score column.
get_ratings <- function(df1, df2, v)
{
for(i in 2:21)
{
df2$x <- subset(df1, Hotel.name == v[i], select = c("Freq"))
# Renaming doesn't work, but is necessary for other columns to be added
colnames(df2)[i+1] <- hotels_vector[i]
}
return(df2)
}
final_vegas[1] <- NULL
hotel_ratings <- subset(vegas, select = c("Score", "Hotel.name"))
hotel_ratings <- as.data.frame(table(hotel_ratings))
scores <- subset(hotel_ratings, Hotel.name == hotels_vector[1], select = c("Score",                   "Freq"))
scores <- get_ratings(hotel_ratings, scores, hotels_vector)
# Now we need to transpose this subset of scores and join with the rest
t_ratings <- function(df1, df2, v)
{
# df1 is scores
# df2 is final
for(i in 3:22)
{
temp <- as.data.frame(t(df1[,i]))
z <- i - 1
temp$x <- v[z]
colnames(temp) <- c("r1", "r2", "r3", "r4", "r5", "Hotel.name")
df2 <- rbind(df2, temp)
}
rownames(df2) <- NULL
return(df2)
}
final <- as.data.frame(t(scores[,2]))
final$x <- hotels_vector[1]
colnames(final) <- c("r1", "r2", "r3", "r4", "r5", "Hotel.name")
final <- t_ratings(scores, final, hotels_vector)
# And now we can finally merge the two dataframes into our final data
unique_hotels <- merge(final_vegas, final, by = "Hotel.name")
unique_hotels
# But we also need a subset with all the scores in tact.
hotel_scores <- vegas[, c(5, 8:16)]
hotel_scores <- YNconverter(hotel_scores)
library(ggplot2)
library(reshape2)
# Boxplot
ggplot(hotel_scores, aes(y = Score, x = Hotel.name))
+ geom_boxplot()
directory <- getwd()
url <- "https://raw.githubusercontent.com/EyeDen/las-vegas/master/LasVegasTripAdvisorReviews-Dataset.csv"
download.file(url = url, destfile = paste(directory,      "LasVegasTripAdvisorReviews-Dataset.csv", sep = "/"))
vegas <- read.csv("LasVegasTripAdvisorReviews-Dataset.csv", sep = ';')
head(vegas, 10)
summary(vegas)
# Calculate mean and median ratings for each hotel
aggregate(Score~Hotel.name, vegas, mean)
aggregate(Score~Hotel.name, vegas, median)
# Get all unique hotels and turn it into a vector
library(dplyr)
hotels <- vegas %>% distinct(vegas$Hotel.name)
hotels_vector <- hotels$`vegas$Hotel.name`
hotels_vector <- as.vector(hotels_vector)
hotels_vector
# We see that there are 22 hotels in this data set.
# The issue, however, is that all values are identical for each hotel entry.
# i.e. For all entries of Circus Circus, the number of rooms doesn't change.
# That means we should condense this down to entry, ideally.
sub_vegas <- vegas[, c(5, 8:16)]
temp <- subset(sub_vegas, Hotel.name == hotels_vector[1])
final_vegas <- temp[1,]
# Now we just have to repeat this 21 more times.
# Fortunately, we should be able to do this with a function.
make_df <- function(df, v)
{
sub_vegas <- df[, c(5, 8:16)]
temp <- subset(sub_vegas, Hotel.name == v[1])
final_vegas <- temp[1,]
for(i in 2:21)
{
temp <- subset(sub_vegas, Hotel.name == v[i])
final_vegas <- rbind(final_vegas, temp[1,])
}
return(final_vegas)
}
final_vegas <- make_df(vegas, hotels_vector)
# Now let's change all the "YES" and "NO" values to 1 and 0
# Again, this will probably be easier as a function.
YNconverter <- function(df)
{
for(i in 2:7)
{
df[,i] <- factor(as.numeric(df[,i]))
levels(df[,i])[1] <- "0"
levels(df[,i])[2] <- "1"
}
return(df)
}
final_vegas <- YNconverter(final_vegas)
# Now we need the number of scores for each hotel.
# And we can delete the Score column.
get_ratings <- function(df1, df2, v)
{
for(i in 2:21)
{
df2$x <- subset(df1, Hotel.name == v[i], select = c("Freq"))
# Renaming doesn't work, but is necessary for other columns to be added
colnames(df2)[i+1] <- hotels_vector[i]
}
return(df2)
}
final_vegas[1] <- NULL
hotel_ratings <- subset(vegas, select = c("Score", "Hotel.name"))
hotel_ratings <- as.data.frame(table(hotel_ratings))
scores <- subset(hotel_ratings, Hotel.name == hotels_vector[1], select = c("Score",                   "Freq"))
scores <- get_ratings(hotel_ratings, scores, hotels_vector)
# Now we need to transpose this subset of scores and join with the rest
t_ratings <- function(df1, df2, v)
{
# df1 is scores
# df2 is final
for(i in 3:22)
{
temp <- as.data.frame(t(df1[,i]))
z <- i - 1
temp$x <- v[z]
colnames(temp) <- c("r1", "r2", "r3", "r4", "r5", "Hotel.name")
df2 <- rbind(df2, temp)
}
rownames(df2) <- NULL
return(df2)
}
final <- as.data.frame(t(scores[,2]))
final$x <- hotels_vector[1]
colnames(final) <- c("r1", "r2", "r3", "r4", "r5", "Hotel.name")
final <- t_ratings(scores, final, hotels_vector)
# And now we can finally merge the two dataframes into our final data
unique_hotels <- merge(final_vegas, final, by = "Hotel.name")
unique_hotels
# But we also need a subset with all the scores in tact.
hotel_scores <- vegas[, c(5, 8:16)]
hotel_scores <- YNconverter(hotel_scores)
library(ggplot2)
library(reshape2)
# Boxplot
ggplot(hotel_scores, aes(y = Score, x = Hotel.name)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + labs(title = "Boxplot of Hotel Scores", x = "Hotels", y = "Scores")
# As we see in the boxplot, several hotels have medians at the maximum score of 5
# Very impressive!  Now let's see how the scores breakdown for each individual hotel.
melted_data <- melt(unique_hotels, id.vars = "Hotel.name")
ggplot(melted_data, aes(Hotel.name, value, col = variable)) + geom_point() + stat_smooth() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + labs(title="Number of scores for each hotel", x = "Hotels", y = "Number of scores")
# This is a lot of data, but we see some interesting things.
# Encore at Wynn, Cosmopolitan, Venetian, Trump International, and the Wynn all
# have earned 15 or more 5 ratings from TripAdvisor users.
# Let's see if amenities might have helped them.
ggplot(unique_hotels, aes(x = Pool)) + geom_bar() + ggtitle("Number of hotels with a pool")
ggplot(unique_hotels, aes(x = Gym)) + geom_bar() + ggtitle("Number of hotels with a gym")
ggplot(unique_hotels, aes(x = Tennis.court)) + geom_bar() + ggtitle("Number of hotels with a tennis court")
ggplot(unique_hotels, aes(x = Spa)) + geom_bar() + ggtitle("Number of hotels with a spa")
ggplot(unique_hotels, aes(x = Casino)) + geom_bar() + ggtitle("Number of hotels with a casino")
ggplot(unique_hotels, aes(x = Free.internet)) + geom_bar() + ggtitle("Number of hotels with free internet")
# Well, with the exception of a spa, most hotels seem to have similar amenities.
# Let's focus on star ratings
high_list <- c("Encore at wynn Las Vegas", "The Cosmopolitan Las Vegas", "The Venetian Las Vegas Hotel", "Trump International Hotel Las Vegas", "Wynn Las Vegas")
best_hotels <- hotel_scores[hotel_scores$Hotel.name %in% high_list, ]
best_unique <- unique_hotels[unique_hotels$Hotel.name %in% high_list, ]
ggplot(best_unique, aes(Hotel.stars)) + geom_bar() + ggtitle("Quality of hotel stars among the highest rated hotels")
# So among our highest rated hotels, all of them are considered to be 5-star!
# Let's also examine the number of rooms, to see if that has any impact
ggplot(best_unique, aes(x = Hotel.name, y = Nr..rooms)) + geom_point() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + ggtitle("Number of rooms for each hotel")
# There is a wide disparity in the number of rooms.  The Venetian has over 4000, # while Trump International has a little over a 1000!  Yet, they earned the same
# number of 5 ratings by TripAdvisor visitors!
library(DBI)
?dbConnect
con <- dbConnect(RMySQL::MySQL(), group = "my-db")
library(RMySQL)
install.packages("RMySQL")
con <- dbConnect(RMySQL::MySQL(), group = "my-db")
con <- dbConnect(RMySQL::MySQL(), dbname = "my-db")
con <- dbConnect(RMySQL::MySQL(), user = "root", password = "RogueOne10", dbname = "my-db")
con <- dbConnect(RMySQL::MySQL(), user = "root", password = "RogueOne10", group = "my-db")
dbListTables(con)
con <- dbConnect(RMySQL::MySQL(), user = "root", password = "RogueOne10", group = "my-db", dbname = "movies")
dbListTables(con)
dbReadTable(con, "movies")
install.packages("DBI")
con <- dbConnect(RMySQL::MySQL(), user = "root", "password = "RogueOne10", dbname = "movies")
con <- dbConnect(RMySQL::MySQL(), user = "root", password = "RogueOne10", dbname = "movies")
movies <- dbReadTable(con, "movies")
movies
exam.scores <- c(57, 66, 69, 71, 72, 73, 74, 77, 78, 79, 79, 81, 81, 82, 83, 83, 88, 89, 94)
?data.table
?data.frame
exam <- exam.scores
exam <- data.frame(exam.scores)
exam
boxplot(exam)
boxplot(exam.scores)
library(openintro)
heart <- data("heartTr")
head(heart, 10)
head(heartTr, 10)
dead <- sum(heartTr$survived == "dead")
dead
dead.control <- sum(heartTr$survived == "dead" && heartTr$transplant == "control")
dead.control
?subset
control <- subset(heartTr, transplant == "control")
dead.control <- count(heartTr$survived == "dead" && heartTr$transplant == "control")
dead.control <- table(heartTr$survived == "dead" && heartTr$transplant == "control")
dead.control
dead.control <- table(control$survived == "dead")
dead.control
treatment <- subset(heartTr, transplant = "treatment")
dead.treatment <- table(treatment$survived == "dead")
dead.treatment
dead.control <- 30/34
dead.control
prop.treatment <- 75/103
prop.treatment
alive <- table(heartTr$survived == "survived")
alive
alive <- table(heartTr$survived == "alive")
alive
summary(heartTr)
table(heartTr$transplant == "treatment")
library(latex)
install.packages(latex)
install.packages("latexpdf")
library(DATA606
)
startlab(1)
startLab(1)
?startLab
startLab(lab1)
startLab(Lab1)
startLab("Lab1")
source("more/cdc.R")
getwd()
setwd("C:/Users/Iden/Documents/Lab1")
source("more/cdc.R")
names(cdc)
tail(cdc, 10)
smoke <- table(cdc$smoke100)
barplot(smoke)
summary(cdc$height)
summary(cdc$weight)
summary(cdc$age)
table(cdc$gender)/20000
table(cdc$exerany)/20000
table(cdc$gender == "m")
table(cdc$gender)
table(cdc$genhlth)
table(cdc$gender, cdc$smoke100)
mosaicplot(table(cdc$gender, cdc$smoke100))
dim(cdc)
mdata <- subset(cdc, cdc$gender == "m")
m_and_over30 <- subset(cdc, gender == "m" & age > 30)
m_or_over30 <- subset(cdc, gender == "m" | age > 30)
under23_and_smoke <- subset(cdc, cdc$smoke100 == 1 & age < 23)
head(cdc, 10)
head(under23_and_smoke)
boxplot(cdc$height)
boxplot(cdc$height ~ cdc$gender)
bmi <- (cdc$weight / cdc$height^2) * 703
boxplot(bmi ~ cdc$genhlth)
head(cdc, 10)
boxplot(bmi ~ cdc$smoke100)
boxplot(bmi ~ cdc$age)
boxplot(bmi ~ cdc$gender)
boxplot(bmi ~ cdc$smoke100)
plot(cdc$weight ~ cdc$wtdesire)
plot(cdc$wtdesire ~ cdc$weight)
plot(cdc$weight ~ cdc$wtdesire)\
plot(cdc$weight ~ cdc$wtdesire)
wdiff <- cdc$wtdesire - cdc$weight
plot(wdiff)
boxplot(wdiff)
hist(wdiff)
summary(wdiff)
m_weight <- subset(cdc, cdc$gender == "m" & cdc$weight & cdc$wtdesire)
f_weight <- subset(cdc, cdc$gender == "f" & cdc$weight & cdc$wtdesire)
m_wdiff <- m_weight$wtdesire - m_weight$weight
f_wdiff <- f_weight$wtdesire - f_weight$weight
?subset
m_weight
m_weight1 <- subset(cdc, c(cdc$gender == "m", cdc$weight, cdc$wtdesire))
head(m_wdiff, 10)
boxplot(m_weight$weight ~ f_weight$weight)
length(m_weight)
length(f_weight)
boxplot(m_weight$weight ~ m_weight$wtdesire)
boxplot(m_wdiff ~ w_diff)
boxplot(m_wdiff ~ f_wdiff)
summary(m_weight)
tail(m_weight, 10)
tail(w_weight, 10)
tail(f_weight, 10)
table(m_weight)
summar(m_weight)
summary(m_weight)
summary(f_weight)
boxplot(cdc$weight & cdc$gender == "m")
boxplot(m_weight$weight, f_weight$weight)
?boxplot
boxplot(m_weight$weight, f_weight$weight, names = c("Male", "Female"), main = "Weight of Males vs Females", xlab = "Weight")
boxplot(m_weight$wtdesire, f_weight$wtdesire, names = c("Male", "Female"), main = "Desired Weight of Males vs Females", ylab = "Weight")
boxplot(m_wdiff, f_wdiff, names = c("Male", "Female"), main = "Difference Between Desired Weight and Current Weight for Males and Females", ylab = "Difference")
summary(cdc$weight)
pnorm(cdc$weight)
?pnorm
sd(cdc$weight)
mean(cdc$weight)
pnorm(cdc$weight, mean = mean(cdc$weight), sd = sd(cdc$weight))
above <- mean(cdc$weight) + sd(cdc$weight)
above
below <- mean(cdc$weight) - sd(cdc$weight)
below
table(cdc$weight > below & cdc$weight < above)
14152/20000
